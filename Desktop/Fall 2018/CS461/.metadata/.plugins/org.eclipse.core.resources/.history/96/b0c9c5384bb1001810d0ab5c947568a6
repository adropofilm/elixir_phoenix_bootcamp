package PokerSimulation.main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public class Deck {
	
	private List<Card> deck = new ArrayList<>();
	
	public Deck() 
	{
		initiate_deck();
	}
	
	private void initiate_deck() 
	{
		String Suites[] = {"D", "H", "S", "C"};
		String Ranks[] = {"A", "2", "3", "4", "5", "6","7","8","9","10","J","Q","K"};
		
		// Initiate 52 card deck:
		int card_num = 0;
		
		for (int i = 0; i<4; i++) {
			for (int j=0; j<13; j++) {
				this.deck.add(card_num, new Card(Suites[i], Ranks[j]));
				card_num++;
			}
		}
	}
	
	// TODO add deal_cards(int cards_needed) to deal cards to players and community pile
	/* this also subtracts cards from deck once complete.
		- 
	*/
	
	public List<Card> deal_cards(int cards_needed)
	{
		List<Card> dealt = new ArrayList<>();
		
		
		int randomNum = ThreadLocalRandom.current().nextInt(0, 4 + 1); 
		
		for (int i = 0; i < cards_needed; i++)
		{
			
		}
		
		return dealt;
	}
	
	public void remove_card(Card remove_card)
	{
		// TODO remove print statement
		
		
        Iterator<Card> it = this.deck.iterator();
        while (it.hasNext()) {
            if (it.next().get_suite() == remove_card.get_suite() && it.next().get_rank() == remove_card.get_rank()) {
            		//System.out.println(it.next().get_card());
                it.remove();
            }
        }
		
		//System.out.println(this.deck.indexOf(new Card(remove_card.get_suite(),remove_card.get_rank())));
		//this.deck.remove(remove_card);
	}
	
	public void shuffle() 
	{
		Collections.shuffle(this.deck);
	}
	

	// Accessors and Mutators:
	
	public List<Card> get_deck() 
	{
		return this.deck;
	}
	
	public int get_size()
	{
		return this.deck.size();
	}
	
	
	

}

package PokerSimulation.main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class Deck {
	
	private List<Card> deck = new ArrayList<>();
	
	public Deck() 
	{
		initiate_deck();
	}
	
	private void initiate_deck() 
	{
		/*
		 * Suites: D = 0, H = 1, S = 2, C = 3
		 * Ranks: 2 = 0, 3 = 1... K=11, A = 12
		 */
		
		Integer Suites[] = {0,1,2,3};
		Integer Ranks[] = {0,1,2,3,4,5,6,7,8,9,10,11,12};
		
		int card_num = 0;
		
		for (int i = 0; i<4; i++) {
			for (int j=0; j<13; j++) {
				this.deck.add(card_num, new Card(Suites[i], Ranks[j]));
				card_num++;
			}
		}
		
		this.shuffle();
	}
	
	public List<Card> deal_cards(int cards_needed)
	{
		List<Card> dealt = new ArrayList<>();
		List<Integer> random_nums = new ArrayList<>();
		
		for (int i = 0; i < this.get_size() - cards_needed; i++)
		{
			random_nums.add(i);
		}
		
		this.shuffle();
		Collections.shuffle(random_nums);
		
		while (dealt.size() < cards_needed)
		{
			dealt.add(this.deck.get((int)random_nums.get(0)));
			this.deck.remove((int)random_nums.get(0));
			random_nums.remove(0);
		}
		return dealt;
	}
	
	public void remove_card(Card remove_card)
	{
        Iterator<Card> it = this.deck.iterator();
        while (it.hasNext()) {
            if (it.next().equals(remove_card)) {
            			it.remove();       	
            }
        }
	}
	
	public void shuffle() 
	{
		Collections.shuffle(this.deck);
	}
	

	// Accessors and Mutators:
	
	public List<Card> get_deck() 
	{
		return this.deck;
	}
	
	public int get_size()
	{
		return this.deck.size();
	}

}
